fig_normal[[i]] = fig1
}
Figure1 = ggarrange(fig_normal[[1]],fig_normal[[2]],fig_normal[[3]],fig_normal[[4]],fig_normal[[5]],fig_normal[[6]],fig_normal[[7]],fig_normal[[8]],fig_normal[[9]],
fig_normal[[10]],fig_normal[[11]],fig_normal[[12]],fig_normal[[13]],fig_normal[[14]],fig_normal[[15]],fig_normal[[16]],fig_normal[[17]],fig_normal[[18]],
fig_normal[[19]],fig_normal[[20]],fig_normal[[21]],fig_normal[[22]],
ncol = 4, nrow = 6,
common.legend = TRUE, legend="top", align = "hv")
# Figure1
mi_nombre_de_archivo = paste("figuras", .Platform$file.sep, "1. Lm for subject NORMAL standing", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Figure1, width=27, height=35, units="cm", limitsize=FALSE, dpi=600)
fig_roved = list()
for (i in 1:length(levels(droplevels(results_tbl$subject)))) {
print(i)
sub = levels(droplevels(results_tbl$subject))[i]
print(sub)
if (sub == "T006"){
fig_roved[[i]] = NULL
}else{
m.pend = lm(perc_dist ~ target_distance*condition,
data = filter(results_tbl,type == "ROVED", subject == sub))
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$slope = m.pend$coefficients[[2]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Ear level"),]$intercepto = m.pend$coefficients[[1]]
results_tbl[(results_tbl$type == "ROVED" & results_tbl$subject == sub &results_tbl$condition == "Floor level"),]$intercepto = m.pend$coefficients[[1]]+m.pend$coefficients[[3]]
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
eq1 <- substitute("Ear level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]],digits = 2),
b = round(m.pend$coefficients[[1]], digits = 2)))
eq2 <- substitute("Floor level:"~~~italic(y) == a %.% italic(X)+italic((b)),
list(a = round(m.pend$coefficients[[2]]+m.pend$coefficients[[4]], digits = 2),
b = round(m.pend$coefficients[[1]]+m.pend$coefficients[[3]], digits = 2)))
eq3 <- substitute("r.squared:"~~~italic(R)^italic(2) == italic(b),
list(b = round(summary(m.pend)$r.squared, digits = 2)))
fig2 = ggplot(filter(results_tbl,type == "ROVED", subject == sub),
aes(x = target_distance, y = perc_dist, ymin = perc_dist-perc_dist_sem, ymax = perc_dist+perc_dist_sem,
colour = condition, fill = condition, group = condition))+
geom_pointrange(alpha = 0.4,
position = position_jitterdodge(jitter.width = .1,
jitter.height = 0,
dodge.width = .1 ))+
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 1,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
geom_abline(slope = m.pend$coefficients[[2]],
intercept = m.pend$coefficients[[1]],
alpha = 0.5,
color = "#000000") +
geom_abline(slope = m.pend$coefficients[[2]]+m.pend$coefficients[[4]],
intercept = m.pend$coefficients[[1]]+m.pend$coefficients[[3]],
alpha = 0.5,
color = "#E69F00") +
geom_text(x = 0.2, y = 7.6, label = sub, hjust = 0, nudge_x =  0, parse = TRUE, size = 3.2, color = "#999999")+
geom_text(x = 0.2, y = 6.6, label = as.character(as.expression(eq1)), hjust = 0, nudge_x =  0, parse = TRUE, size = 3.2, color = "#000000")+
geom_text(x = 0.2, y = 5.6, label = as.character(as.expression(eq2)), hjust = 0, nudge_x =  0,parse = TRUE, size = 3.2, color = "#E69F00")+
geom_text(x = 0.2, y = 4.6, label = as.character(as.expression(eq3)), hjust = 0, nudge_x =  0, parse = TRUE, size = 3.2, color = "#009E73")+
scale_x_continuous(name="Distance source (m)", limits = c(0,8)) +
scale_y_continuous(name="Perceived distance (m)",   limits = c(0,8)) +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "top",
legend.title = element_blank())
fig_roved[[i]] = fig2
}
}
# Figure2 = ggarrange(fig_roved[[1]],fig_roved[[2]],fig_roved[[3]],fig_roved[[4]],fig_roved[[5]],fig_roved[[6]],fig_roved[[7]],fig_roved[[8]],fig_roved[[9]],
#                     fig_roved[[10]],fig_roved[[11]],fig_roved[[12]],fig_roved[[13]],
#                     ncol = 4, nrow = 6,
#                     common.legend = TRUE, legend="top", align = "hv")
Figure2 = ggarrange(fig_roved[[1]],fig_roved[[2]],fig_roved[[3]],fig_roved[[4]],fig_roved[[5]],fig_roved[[6]],fig_roved[[7]],fig_roved[[8]],fig_roved[[9]],
fig_roved[[10]],fig_roved[[11]],fig_roved[[12]],fig_roved[[13]],fig_roved[[14]],fig_roved[[15]],fig_roved[[16]],fig_roved[[17]],fig_roved[[18]],
fig_roved[[19]],fig_roved[[20]],fig_roved[[21]],fig_roved[[22]],
ncol = 4, nrow = 6,
common.legend = TRUE, legend="top", align = "hv")
mi_nombre_de_archivo = paste("figuras", .Platform$file.sep, "2. Lm for subject ROVED standing", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Figure2, width=27, height=35, units="cm", limitsize=FALSE, dpi=600)
results_tbl_standing = results_tbl
results_tbl = merge(x = results_tbl_sitting, y = results_tbl_standing, all = TRUE)
# Write_csv with SLOPE AND INTERCEPTO
write_csv(results_tbl, "./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv")
library(tidyverse)
library(Routliers)
rm(list=ls())
results_tbl <- read.csv("./DatosUnificados/Dresults.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
# Unsigned bias
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned,threshold = 2 ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mBiasUnsigned ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Floor$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned,threshold = 2 ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mBiasUnsigned ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Floor$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned,threshold = 2 ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mBiasUnsigned ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Floor$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
#                     ggarrange(f6+rremove("x.text")+rremove("x.title"),
#                               f7+rremove("x.text")+rremove("x.title"),
#                               f8+rremove("x.text")+rremove("x.title"),
#                               ncol = 3, nrow = 1,labels = c("B", "C", "D"),
#                               common.legend = FALSE, legend="none", align = "h")+theme(plot.margin = unit(c(-10,0,-50,0), 'cm')),
#                     heights = c(.8, 1),
#                     ncol = 1, nrow = 2,labels = c("A", ""),
#                     common.legend = TRUE, legend="top", align = "h")
# Figure2
#
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
idx = results_tbl$subject == "T005"
results_tbl = results_tbl[!idx,]
# idx = results_tbl$subject == "S013"
# results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S001" & results_tbl$condition == "Floor level"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003" & results_tbl$type == "ROVED"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003"& results_tbl$condition == "Ear level" & results_tbl$type == "NORMAL"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S012"& results_tbl$condition == "Ear level"& results_tbl$type == "ROVED"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S019"& results_tbl$condition == "Ear level"& results_tbl$type == "ROVED"
results_tbl = results_tbl[!idx,]
m.Dist1 <-  lmer(perc_dist ~ target_distance*location+(1+target_distance|subject)+(0+location|subject),
data = filter(results_tbl,condition == "Ear level",type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*location+(1+target_distance|subject)+(0+location|subject),
data = filter(results_tbl,condition == "Floor level",type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,location == "standing",type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,location == "sitting",type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "ROVED") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
# ggtitle("ROVED")+
# facet_grid(.~location)+
facet_grid(.~condition)+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = "top")
Final.Fixed.Plot
f5 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED condition", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=15, height=10, units="cm", limitsize=FALSE, dpi=600)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
# ggtitle("ROVED")+
facet_grid(.~location)+
# facet_grid(.~condition)+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = "top")
Final.Fixed.Plot
f5 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED condition", ".png", sep = '')
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED location", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=15, height=10, units="cm", limitsize=FALSE, dpi=600)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
# ggtitle("ROVED")+
# facet_grid(.~location)+
# facet_grid(.~condition)+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = "top")
Final.Fixed.Plot
f5 = Final.Fixed.Plot
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
# ggtitle("ROVED")+
# facet_grid(.~location)+
# facet_grid(.~condition)+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = "top")
Final.Fixed.Plot
f5 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED todas", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=15, height=10, units="cm", limitsize=FALSE, dpi=600)
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("NORMAL")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
results_tbl = results_tbl %>% filter(location == "standing") %>%
ungroup()
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=condition))+
geom_line(aes(color=condition), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
#                     ggarrange(f6+rremove("x.text")+rremove("x.title"),
#                               f7+rremove("x.text")+rremove("x.title"),
#                               f8+rremove("x.text")+rremove("x.title"),
#                               ncol = 3, nrow = 1,labels = c("B", "C", "D"),
#                               common.legend = FALSE, legend="none", align = "h")+theme(plot.margin = unit(c(-10,0,-50,0), 'cm')),
#                     heights = c(.8, 1),
#                     ncol = 1, nrow = 2,labels = c("A", ""),
#                     common.legend = TRUE, legend="top", align = "h")
# Figure2
#
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
idx = results_tbl$subject == "T005"
results_tbl = results_tbl[!idx,]
# idx = results_tbl$subject == "S013"
# results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S001" & results_tbl$condition == "Floor level"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003" & results_tbl$type == "ROVED"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003"& results_tbl$condition == "Ear level" & results_tbl$type == "NORMAL"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S012"& results_tbl$condition == "Ear level"& results_tbl$type == "ROVED"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S019"& results_tbl$condition == "Ear level"& results_tbl$type == "ROVED"
results_tbl = results_tbl[!idx,]
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "ROVED") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
# ggtitle("ROVED")+
# facet_grid(.~location)+
# facet_grid(.~condition)+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = "top")
Final.Fixed.Plot
f5 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED todas", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=10, height=10, units="cm", limitsize=FALSE, dpi=600)
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED todas", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=7, height=10, units="cm", limitsize=FALSE, dpi=600)
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=10, height=10, units="cm", limitsize=FALSE, dpi=600)
library(tidyverse)
library(Routliers)
rm(list=ls())
results_tbl <- read.csv("./DatosUnificados/Dresults.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
# Unsigned bias
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 3 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned,threshold = 3 ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mBiasUnsigned ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Floor$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 3 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2.5 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 3 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
#                     ggarrange(f6+rremove("x.text")+rremove("x.title"),
#                               f7+rremove("x.text")+rremove("x.title"),
#                               f8+rremove("x.text")+rremove("x.title"),
#                               ncol = 3, nrow = 1,labels = c("B", "C", "D"),
#                               common.legend = FALSE, legend="none", align = "h")+theme(plot.margin = unit(c(-10,0,-50,0), 'cm')),
#                     heights = c(.8, 1),
#                     ncol = 1, nrow = 2,labels = c("A", ""),
#                     common.legend = TRUE, legend="top", align = "h")
# Figure2
#
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2.5 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2.2 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "ROVED", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2.1 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 2 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
