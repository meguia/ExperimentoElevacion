theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "ROVED") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=10, height=10, units="cm", limitsize=FALSE, dpi=600)
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
idx = results_tbl$subject == "T005"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S001"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003"
results_tbl = results_tbl[!idx,]
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
f1 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "NORMAL", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=10, height=10, units="cm", limitsize=FALSE, dpi=600)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
title(NORMAL)+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
title("NORMAL")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("NORMAL")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
f1 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "NORMAL", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=10, height=10, units="cm", limitsize=FALSE, dpi=600)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("ROVED")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "ROVED") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("ROVED")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
f5 = Final.Fixed.Plot
mi_nombre_de_archivo = paste(figures_folder, .Platform$file.sep, "ROVED", ".png", sep = '')
ggsave(mi_nombre_de_archivo, plot=Final.Fixed.Plot, width=10, height=10, units="cm", limitsize=FALSE, dpi=600)
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
idx = results_tbl$subject == "S001"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003"
results_tbl = results_tbl[!idx,]
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
idx = results_tbl$subject == "S001"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003"
results_tbl = results_tbl[!idx,]
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("NORMAL")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "ROVED") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("ROVED")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
rm(list=ls())
results_tbl <- read.csv("./DatosUnificados/Dresults.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
library(tidyverse)
library(Routliers)
rm(list=ls())
results_tbl <- read.csv("./DatosUnificados/Dresults.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
# Unsigned bias
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
f2 <- filter(results_tbl,type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_unsigned)) %>%
ungroup() %>%
ggplot(aes(x = condition,y = 100*mBiasUnsigned,colour = condition, fill = condition)) +
geom_point(alpha = 0.4,
position = position_jitterdodge(jitter.width = .3,
jitter.height = 0,
dodge.width = 1 )) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "bar",
alpha = .4,
position = position_dodge(width = 1)) +
stat_summary(fun.data = "mean_se",
geom = "linerange",
size=2,
position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Relative signed \nbias [%]") +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f2
f2 <- filter(results_tbl,type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_signed)) %>%
ungroup() %>%
ggplot(aes(x = condition,y = 100*mBiasUnsigned,colour = condition, fill = condition)) +
geom_point(alpha = 0.4,
position = position_jitterdodge(jitter.width = .3,
jitter.height = 0,
dodge.width = 1 )) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "bar",
alpha = .4,
position = position_dodge(width = 1)) +
stat_summary(fun.data = "mean_se",
geom = "linerange",
size=2,
position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Relative signed \nbias [%]") +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f2
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_signed ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 3 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL", location == "standing") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_signed,threshold = 3 ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mBiasUnsigned ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Floor$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
## Sentado
f2 <- filter(results_tbl,type == "NORMAL", location == "sitting") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_signed)) %>%
ungroup() %>%
ggplot(aes(x = condition,y = 100*mBiasUnsigned,colour = condition, fill = condition)) +
geom_point(alpha = 0.4,
position = position_jitterdodge(jitter.width = .3,
jitter.height = 0,
dodge.width = 1 )) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_abline(slope = 0,
intercept = 0,
alpha = 0.5,
linetype = "dashed") +
stat_summary(fun.data = "mean_se",
geom = "bar",
alpha = .4,
position = position_dodge(width = 1)) +
stat_summary(fun.data = "mean_se",
geom = "linerange",
size=2,
position = position_dodge(width = 1)) +
labs(x = "Condition",
y = "Relative signed \nbias [%]") +
theme_pubr(base_size = 12, margin = TRUE)+
theme(legend.position = "none")
f2
tabla.ind.Eye <- results_tbl %>%
filter(condition == "Ear level", type == "NORMAL", location == "sitting") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_signed ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Eye$mBiasUnsigned,threshold = 3 ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Eye$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Eye[res3$outliers_pos,]
tabla.ind.Floor <- results_tbl %>%
filter(condition == "Floor level", type == "NORMAL", location == "sitting") %>%
group_by(subject,condition) %>%
summarise(mBiasUnsigned  = mean(rel_bias_signed,threshold = 3 ,na.rm=TRUE))  %>%
ungroup()
res3 <- outliers_mad(x = tabla.ind.Floor$mBiasUnsigned ,na.rm=TRUE)
plot_outliers_mad(res3,x=tabla.ind.Floor$mBiasUnsigned,pos_display=TRUE)
tabla.ind.Floor[res3$outliers_pos,]
rm(list=ls())
figures_folder = "figuras"
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
results_tbl <- read.csv("./DatosUnificados/Dresults_without_outliers_slope_and_intercepto.csv", header = TRUE, sep = ',', stringsAsFactors = TRUE)
cbPalette <- c("#000000","#E69F00","#009E73", "#999999", "#D55E00", "#0072B2", "#CC79A7", "#F0E442")
idx = results_tbl$subject == "T005"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S012"
results_tbl = results_tbl[!idx,]
idx = results_tbl$subject == "S003"
results_tbl = results_tbl[!idx,]
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "NORMAL") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("NORMAL")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
m.Dist1 <-  lmer(perc_dist ~ target_distance*condition*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
tabla.pob = filter(results_tbl,type == "ROVED") %>% group_by(target_distance,condition,location) %>%
summarise(Mperc_dist  = mean(perc_dist),
SDperc_dist = sd(perc_dist)/sqrt(n()))  %>%
ungroup()
Final.Fixed<-effect(c("target_distance*condition*location"), m.Dist1,
xlevels=list(target_distance=c(2,2.9,4.2,6)))
# You have to convert the output to a dataframe
Final.Fixed<-as.data.frame(Final.Fixed)
Final.Fixed.Plot <-ggplot(data = Final.Fixed, aes(x = target_distance, y =fit, group=interaction(condition,location)))+
geom_line(aes(color=condition,linetype = location), size=2)+
geom_ribbon(aes(ymin=fit-se, ymax=fit+se,fill=condition),alpha=.2)+
geom_point(data = tabla.pob, aes(x = target_distance, y =Mperc_dist,
group = condition,
color = condition),size = 5)+
scale_x_continuous(name="Distance source (cm)", limits = c(0.9,7)) +
scale_y_continuous(name="Perceived distance (cm)",   limits = c(0.9,7)) +
geom_abline(intercept = 0, slope = 1, linetype=3) +
scale_color_manual(values=cbPalette)+
scale_fill_manual(values=cbPalette)+
theme_bw()+
ggtitle("ROVED")+
theme(text=element_text(face="bold", size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title=element_blank(),
legend.position = c(.2, .82))
Final.Fixed.Plot
m.Dist1 <-  lmer(perc_dist ~ target_distance*location+(1+target_distance|subject)+(0+condition|subject),
data = filter(results_tbl,condition == "Ear level",type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*location+(1+target_distance|subject)+(0+location|subject),
data = filter(results_tbl,condition == "Ear level",type == "NORMAL"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*location+(1+target_distance|subject)+(0+location|subject),
data = filter(results_tbl,condition == "Ear level",type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
m.Dist1 <-  lmer(perc_dist ~ target_distance*location+(1+target_distance|subject)+(0+location|subject),
data = filter(results_tbl,condition == "Ear level",type == "ROVED"))
extract_stats(ggcoefstats(m.Dist1))
r.squaredGLMM(m.Dist1)
anova(m.Dist1)
